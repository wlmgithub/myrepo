"""Based on Darius' initial implementation

	fabric ->
		product ->
			service ->
				machine ->
					instance ->
						version




    fabric = foobar.tools.fabric.Fabric(c.args.fabric)

    # actually all service container names
    all_services = [ i.container.name for p in fabric.products for s in p.services for i in s.instances ]

    # Sort the results so things are generally consistent
    all_services = foobar.utils.seq.unique(all_services)
    all_services.sort()

    for p in fabric.products:
      for s in p.services:
        for i in s.instances:
          warname = i.coordinates.split('/')[-2]
          host = i.host.name
          cname = i.container.name  # cname: service instance container name
          version = i.version
          iname = i.id
          print cname, host, iname, version

"""

import pprint 

from flask import Flask, request
app = Flask(__name__)

from collections import defaultdict

import foobar.tools.fabric

@app.route('/')
def main():

  FABRICNAMES_PROD = [ 'PROD-ELA4', 'PROD-ECH3' ]
  FABRICNAMES_STG = [ 'STG-BETA', 'STG-ALPHA' ]
  FABRICNAMES_EI = [ 'EI3' ]

  FABRICNAMES = [ 'PROD-ELA4', 'PROD-ECH3' ]

  env_name = request.args.get('env', '')
  if env_name == 'stg':
    FABRICNAMES = [ 'STG-BETA', 'STG-ALPHA' ] 
  elif env_name == 'all':
    FABRICNAMES += FABRICNAMES_STG + FABRICNAMES_EI

  FABRICS = [ foobar.tools.fabric.Fabric(fabricname) for fabricname in FABRICNAMES ]

  # mapping: cname -> warname -> fabricname -> version_string (hostname,instancename, version)
  mapping = defaultdict( lambda: defaultdict(lambda: defaultdict()) )
  all_containers = list()

  all_entries = list()


  # actually all service container names
  all_services = [ i.container.name for fabric in FABRICS  for p in fabric.products for s in p.services for i in s.instances ]

  # Sort the results so things are generally consistent
  all_services = foobar.utils.seq.unique(all_services)
  all_services.sort()

  # version of cname, fabricname
  version_of = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))


  for fabric in FABRICS:
    for p in fabric.products:
      for s in p.services:
        for i in s.instances:
          warname = i.coordinates.split('/')[-2]
          host = i.host.name
          cname = i.container.name  # cname: service instance container name 
          version = i.version
          iname = i.id
          fabricname = fabric.name
          version_string = '%s %s %s<br />' % (host, iname, version)
          mytuple = (cname, warname, fabricname, version_string)
          if mytuple not in all_entries:
            all_entries.append(tuple(mytuple))
    
          if not version_of[cname][warname][fabricname]:
            version_of[cname][warname][fabricname] = [version]  
          else:
            if u'%s'%fabricname in version_of[cname][warname]  and version not in version_of[cname][warname][fabricname]:
              version_of[cname][warname][fabricname].append(version)

#          print cname, fabricname, host, iname, version, i.state

#  pprint.pprint(all_entries)

  for cname, warname, fabricname, version_string in all_entries:
    if u'%s'%fabricname in  mapping[cname][warname] and  mapping[cname][warname][fabricname]:
      mapping[cname][warname][fabricname] +=  version_string
    else:
      mapping[cname][warname][fabricname] = version_string
    
#  print '-' * 100
#  pprint.pprint(mapping)
#  pprint.pprint(version_of)

  # version_match: cname ->  ok or not
  version_match = defaultdict(lambda: defaultdict())
  for cname in all_services:
    warnames = mapping[cname].keys()
    for warname in warnames:
      version_match[cname][warname] = 'OK'
      first_fabricname = FABRICNAMES[0]
      for fabricname in FABRICNAMES:
        if not version_of[cname][warname][fabricname]:
          version_match[cname][warname] = 'NOTOK'
        elif len(version_of[cname][warname][fabricname]) != 1:
          version_match[cname][warname] = 'NOTOK'
        if str(version_of[cname][warname][first_fabricname]) != str(version_of[cname][warname][fabricname]):
          version_match[cname][warname] = 'NOTOK'
  
#  print '#' * 100
#  for cname in all_services:
#    for fabricname in FABRICNAMES:
#      if  u'%s'%fabricname in  mapping[cname] and  mapping[cname][fabricname]:
#        print cname, ':', fabricname, ':', mapping[cname][fabricname]

  html = ''
  html += """

    <style type="text/css">
    
    //  START CSS

    body
    {
            line-height: 1.6em;
    }
    
    #hor-minimalist-a
    {
            font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif;
            font-size: 12px;
            background: #fff;
            margin: 45px;
            width: 880px;
            border-collapse: collapse;
            text-align: left;
    }
    #hor-minimalist-a th
    {
            font-size: 14px;
            font-weight: normal;
            color: #039;
            padding: 10px 8px;
            border-bottom: 2px solid #6678b1;
    }
    #hor-minimalist-a td
    {
            color: #669;
            padding: 9px 8px 2px 8px;
    }
    #hor-minimalist-a tbody tr:hover td
    {
            color: #009;
    }
    
    /************************************/
    #hor-minimalist-b
    {
            font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif;
            font-size: 12px;
            background: #fff;
            margin: 45px;
//            width: 880px;
            width: 100%
            border-collapse: collapse;
            text-align: left;
    }
    #hor-minimalist-b th
    {
            font-size: 14px;
            font-weight: normal;
            color: #039;
            padding: 10px 8px;
            border-bottom: 2px solid #6678b1;
    }
    #hor-minimalist-b td
    {
            border-bottom: 1px solid #ccc;
            color: #669;
            padding: 6px 8px;
    }
    #hor-minimalist-b tbody tr:hover td
    {
            color: #009;
    }

    #mismatch {
            background-color: red;
    }

 
    // END CSS 
    </style>

  """

  html += '<h1> Release Audit Result: (according to GLU API) </h1>'
  html += '<table id="hor-minimalist-b">'

  html += '<thead>'
  html += '<tr>'
  html += '<th scope="col"> Container </th>'
  html += '<th scope="col"> WAR </th>'
  for  fabricname in FABRICNAMES:
    html += '<th scope="col"> %s </th>' % fabricname
  html += '</tr>'
  html += '</thead>'

  html += '<tbody>'

  for cname in all_services:
    warnames = mapping[cname].keys()
    warcount = len(warnames)
    # if warcount > 1, then we need to mark cname cell with rowspan = <warcount>
    #                  otherwise, leave out the td markup
    cname_cell_marked = False
    for warname in warnames:
      if version_match[cname][warname] == 'NOTOK':
        html += '<tr id="mismatch">'
      else:
        html += '<tr>'

      if warcount > 1:
        if not cname_cell_marked:
          html += '<td rowspan="%d"> %s </td>' % (warcount, cname)
          cname_cell_marked = True
      else:
        html += '<td> %s </td>' % (cname)

      html += '<td> %s </td>' % warname

      for fabricname in FABRICNAMES:
        if  u'%s'%fabricname in  mapping[cname][warname] and  mapping[cname][warname][fabricname]:
          html += '<td> %s </td> ' % ( mapping[cname][warname][fabricname] )
        else:
          html += '<td>  &nbsp; </td> ' 

      html += '</tr>'

  html += '<tbody>'
  html +='</table>'

  return html


if __name__ == '__main__':
  app.run(host='0.0.0.0', port=8899, debug=True)
  
